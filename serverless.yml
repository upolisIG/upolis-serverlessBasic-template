# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: upolis-function-template # NOTE: update this with your service name

# ********************************************
# Custom Parameter Data 
# ********************************************
custom:
  domain: XXXX # NOTE: Update XXXX with the API's Domain defined to this service. Ex.: general, citizens, agents
  path: /${self:service} # NOTE: If you require, update this with a custom path
  method: post # NOTE: Update with the service's HTTP method
  deploymentBucket: upolis.${self:provider.region}.deploy-files
# Add this line to refer specific table in Data Base
#  tableName: 'upolis.table.${self:provider.stage}'
  logSubscription:
      enabled: true
      filterName: ${self:service}-${self:provider.stage}
      destinationArn: arn:aws:lambda:${self:provider.region}:${opt:account,''}:function:logs-to-elasticsearch-${opt:stage,''}-cloudwatch-logs-to-elasticsearch

      
# ********************************************
# Serverless Framework Version
# ********************************************
# frameworkVersion: "=X.X.X"


# ********************************************
# AWS Configuration Data
# ********************************************
provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage,'dev'}
  region: ${opt:region,'us-east-1'}
  deploymentBucket: 
    name: ${self:custom.deploymentBucket}
# * Lambda function's IAM Role
  iamRoleStatements:

# ** DynamoDB IAM Role configuration
#    - Effect: "Allow"
#      Action:
#        - dynamodb:Scan        
#      Resource:
#        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}"

# ** S3 IAM Role configuration
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# * Lambda function's API Gateway 
  apiGateway:
    restApiId:
      'Fn::ImportValue': upolis-api-ApiID
    restApiResources:
      /upolis/XXX: # NOTE: Replace by the custom domain
        'Fn::ImportValue': upolis-api-${self:custom.domain}

# * Service wide environment variables
# NOTE: Add the variables that you need
  environment:
    PATH: /upolis/${self:custom.domain}${self:custom.path}

# ********************************************
# Packaging Information
# ********************************************
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**


# ********************************************
# Lambda function Definition
# ********************************************
functions:
  app:
    handler: handler.main
    events:
      - http:
          path: /upolis/${self:custom.domain}${self:custom.path}
          method: ${self:custom.method}
          cors: true
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2


# ********************************************
# CloudFormation Templates
# ********************************************
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
